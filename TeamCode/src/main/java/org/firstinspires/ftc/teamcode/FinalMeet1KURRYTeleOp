package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.CRServo;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.hardware.Servo;

@TeleOp(name = "KURRY TeleOp", group = "Linear Opmode")
public class KurryTeleOpV1 extends LinearOpMode {

    private DcMotor frontLeft, frontRight, backLeft, backRight;
    private DcMotor launcherLeft, launcherRight, intake;
    private Servo flapperLeft;
    private CRServo flapperRight;
    private CRServo servoWheel;
    private boolean isHoldingTriggerR = false;
    private boolean isHoldingPositionR = false;
    private boolean isHoldingTriggerL = false;
    private boolean isHoldingPositionL = false;
    private int holdPosition = 0;
    final double ServoWheelRIGHT = 1;
    final double ServoWheelSTOP = 0;
    final double ServoWheelLEFT = -1;
    final double flapperLEFT = 1;
    final double flapperLEFTSTOP = 0;
    final double flapperLEFTDOWN = -1;

    // Launcher speed presets
    private double leftLaunchPower = 0.70;
    private double rightLaunchPower = 0.70;
    private double leftLauncherPowerMID = 0.80;
    private double rightLauncherPowerMID = 0.80;

    private double flapperPosition = 0.02;
    private double flapperRightPosition = 1;

    @Override
    public void runOpMode() {
        frontLeft = hardwareMap.get(DcMotor.class, "frontLeft");
        frontRight = hardwareMap.get(DcMotor.class, "frontRight");
        backLeft = hardwareMap.get(DcMotor.class, "backLeft");
        backRight = hardwareMap.get(DcMotor.class, "backRight");
        launcherLeft = hardwareMap.get(DcMotor.class, "launcherLeft");
        launcherRight = hardwareMap.get(DcMotor.class, "launcherRight");
        intake = hardwareMap.get(DcMotor.class, "intake");
        flapperLeft = hardwareMap.get(Servo.class, "servo1");
        flapperRight = hardwareMap.get(CRServo.class, "servo2");
        servoWheel = hardwareMap.get(CRServo.class, "servo3");

        frontRight.setDirection(DcMotor.Direction.FORWARD);
        backRight.setDirection(DcMotor.Direction.REVERSE);
        frontLeft.setDirection(DcMotor.Direction.REVERSE);
        backLeft.setDirection(DcMotor.Direction.FORWARD);
        launcherLeft.setDirection(DcMotorSimple.Direction.FORWARD);
        launcherRight.setDirection(DcMotorSimple.Direction.REVERSE);
        flapperLeft.setDirection(Servo.Direction.REVERSE);
        flapperRight.setDirection(CRServo.Direction.FORWARD);

        intake.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        intake.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        intake.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);

        flapperLeft.setPosition(flapperPosition);


        telemetry.addLine("KURRY TeleOp Initialized");
        telemetry.update();

        waitForStart();

        while (opModeIsActive()) {
            double y = -gamepad1.left_stick_y;
            double x = gamepad1.left_stick_x;
            double rx = gamepad1.right_stick_x;

            double frontLeftPower = y + x + rx;
            double backLeftPower = y - x + rx;
            double frontRightPower = y - x - rx;
            double backRightPower = y + x - rx;

            frontLeft.setPower(frontLeftPower);
            backLeft.setPower(backLeftPower);
            frontRight.setPower(frontRightPower);
            backRight.setPower(backRightPower);




            // if (gamepad2.x) {
            //   rightLaunchPower = 0.45; // Close
            //} else if (gamepad2.b) {
            //   rightLaunchPower = 0.65; // Medium
            //} else if (gamepad2.y) {
            //  rightLaunchPower = 0.85; // Far
            //}

            // Launch activation (A button)
            if (gamepad2.a) {
                launcherLeft.setPower(leftLaunchPower);
            } else {
                launcherLeft.setPower(0);
            }
            if (gamepad2.b) {
                launcherRight.setPower(rightLaunchPower);
            } else {
                launcherRight.setPower(0);
            }

            if (gamepad2.x) {
                launcherLeft.setPower(leftLauncherPowerMID);
            } else {
                launcherLeft.setPower(0);
            }
            if (gamepad2.y) {
                launcherRight.setPower(rightLauncherPowerMID);
            } else {
                launcherRight.setPower(0);
            }

            //if (gamepad1.b) {
              //  rightLaunchPower += 0.05;
                //if (rightLaunchPower > 1.0) {
                  //  rightLaunchPower = 1.0;
                //}
            //}
        //}

        //if (gamepad1.x) {
          //  leftLaunchPower += 0.05;
            //if (leftLaunchPower > 0.1) {
              //  leftLaunchPower = 0.1;
            //}

            // -------------------------------
            // Intake (Gamepad 1)
            // -------------------------------
            if (gamepad1.right_trigger > 0.2) {
                isHoldingTriggerR = true;
                isHoldingPositionR = false;
                intake.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
                intake.setPower(0.8);
            } else if (isHoldingTriggerR) {
                isHoldingTriggerR = false;
                isHoldingPositionR = true;
                holdPosition = intake.getCurrentPosition();
                intake.setTargetPosition(holdPosition);
                intake.setMode(DcMotor.RunMode.RUN_TO_POSITION);
                intake.setPower(0.3);
            }

            if (gamepad1.left_trigger > 0.2) {
                isHoldingTriggerL = true;
                isHoldingPositionL = false;
                intake.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
                intake.setPower(-0.8);
            } else if (isHoldingTriggerL) {
                isHoldingTriggerL = false;
                isHoldingPositionL = true;
                holdPosition = intake.getCurrentPosition();
                intake.setTargetPosition(holdPosition);
                intake.setMode(DcMotor.RunMode.RUN_TO_POSITION);
                intake.setPower(0.8);
            }

            // -------------------------------
            // Flapper Servo (Gamepad 2)
            // -------------------------------
            if (gamepad2.dpad_down) {
                flapperPosition = 0.02;
            } else if (gamepad2.dpad_up) {
                flapperPosition = 0.28;
            }

            if (gamepad1.dpad_right) {
                flapperRight.setPower(flapperLEFT);
            } else if (gamepad1.dpad_left) {
                flapperRight.setPower(flapperLEFTDOWN);
            }

            if (gamepad2.right_stick_button) {
                servoWheel.setPower(ServoWheelRIGHT);

            } else if (gamepad2.left_stick_button) {
                servoWheel.setPower(ServoWheelLEFT);
        } else if (gamepad2.right_bumper) {
            servoWheel.setPower(ServoWheelSTOP);
        }

            flapperPosition = Math.max(0.0, Math.min(1.0, flapperPosition));
            flapperLeft.setPosition(flapperPosition);

            telemetry.addData("Left Launch Power", "%.2f", leftLaunchPower);
            telemetry.addData("Right Launch Power", "%.2f", rightLaunchPower);
            telemetry.addData("Flapper Pos", "%.2f", flapperPosition);
            telemetry.addData("Flapper Pos", "%.2f", flapperRightPosition);
            telemetry.update();

            sleep(50);
        }
    }
}
